"use client";

import React, { useState, useEffect, useRef, useMemo } from "react";
import {
  ThemeProvider,
  createTheme,
  CssBaseline,
  Container,
  Paper,
  Typography,
  Button,
  IconButton,
} from "@mui/material";
import { DarkMode, LightMode, Mic, Shuffle } from "@mui/icons-material";
import { getDatabase, ref, get } from "firebase/database";
import app from "../firebaseConfig";
import PopupMenu from "../components/PopupMenu";
import Head from "next/head";

const list = [
  { name: "bai-1", title: "B√†i 1" },
  { name: "bai-2", title: "B√†i 2" },
  { name: "bai-3", title: "B√†i 3" },
  { name: "bai-4", title: "B√†i 4" },
  { name: "bai-5", title: "B√†i 5" },
  { name: "bai-6", title: "B√†i 6" },
  { name: "bai-7", title: "B√†i 7" },
  { name: "bai-8", title: "B√†i 8" },
  { name: "bai-9", title: "B√†i 9" },
];

export default function SpeakingPractice() {
  const [word, setWord] = useState<string>("Ï¶ùÏÉÅ");
  const [userSpeech, setUserSpeech] = useState("");
  const [score, setScore] = useState<number | null>(null);
  const [darkMode, setDarkMode] = useState(true); // m·∫∑c ƒë·ªãnh t·ªëi
  const [loading, setLoading] = useState(false);
  const recognitionRef = useRef<any>(null);

  // ‚úÖ Kh·ªüi t·∫°o SpeechRecognition
  useEffect(() => {
    if (typeof window !== "undefined") {
      // üëá Khai b√°o m·ªü r·ªông ki·ªÉu cho window
      const SpeechRecognition =
        (window as any).SpeechRecognition ||
        (window as any).webkitSpeechRecognition;

      if (SpeechRecognition) {
        recognitionRef.current = new SpeechRecognition();
        recognitionRef.current.lang = "ko-KR";
      }
    }
  }, []);

  // üé® Theme MUI
  const theme = useMemo(
    () =>
      createTheme({
        palette: {
          mode: darkMode ? "dark" : "light",
          primary: { main: darkMode ? "#90caf9" : "#1976d2" },
          background: {
            default: darkMode ? "#121212" : "#f5f5f5",
            paper: darkMode ? "#1e1e1e" : "#ffffff",
          },
        },
      }),
    [darkMode]
  );

  // üîÑ L·∫•y ng·∫´u nhi√™n 1 t·ª´ ti·∫øng H√†n t·ª´ Firebase
  const fetchRandomWord = async () => {
    try {
      setLoading(true);

      const randomLesson = list[Math.floor(Math.random() * list.length)];
      const db = getDatabase(app);
      const snapshot = await get(ref(db, randomLesson.name));

      if (!snapshot.exists()) {
        alert(`${randomLesson.title} ch∆∞a c√≥ d·ªØ li·ªáu`);
        setLoading(false);
        return;
      }

      const data = Object.values(snapshot.val()) as any[];
      const randomWord = data[Math.floor(Math.random() * data.length)];

      setWord(randomWord.koreanText);
      setUserSpeech("");
      setScore(null);
      setLoading(false);
    } catch (err) {
      console.error(err);
      alert("Kh√¥ng th·ªÉ t·∫£i t·ª´ ng·∫´u nhi√™n");
      setLoading(false);
    }
  };

  // üé§ Ghi √¢m & nh·∫≠n d·∫°ng
  const handleRecord = () => {
    if (!recognitionRef.current) {
      alert("Tr√¨nh duy·ªát kh√¥ng h·ªó tr·ª£ SpeechRecognition!");
      return;
    }

    const recognition = recognitionRef.current;
    recognition.start();

    recognition.onresult = (event: any) => {
      const transcript = event.results[0][0].transcript.trim();
      setUserSpeech(transcript);
      calculateScore(transcript);
    };

    recognition.onerror = (err: any) => {
      console.error(err);
      alert(
        "Kh√¥ng th·ªÉ nh·∫≠n gi·ªçng n√≥i. H√£y ki·ªÉm tra micro ho·∫∑c quy·ªÅn truy c·∫≠p!"
      );
    };
  };

  // üßÆ T√≠nh ƒëi·ªÉm ch√≠nh x√°c
  const calculateScore = (transcript: string) => {
    const target = word.trim();
    const similarity = compareStrings(target, transcript);
    setScore(similarity);
  };

  // üî¢ So s√°nh 2 chu·ªói (ƒë∆°n gi·∫£n)
  const compareStrings = (a: string, b: string) => {
    const len = Math.max(a.length, b.length);
    let same = 0;
    for (let i = 0; i < len; i++) if (a[i] === b[i]) same++;
    return Math.round((same / len) * 100);
  };

  return (
    <ThemeProvider theme={theme}>
      <CssBaseline />
      <Head>
        <title>D∆∞a H·∫•u</title>
        <link rel="icon" href="/duahau.png" />
      </Head>

      <Container maxWidth="sm" sx={{ mt: 6 }}>
        <PopupMenu />
        <Paper elevation={4} sx={{ p: 4, borderRadius: 3 }}>
          {/* N√∫t chuy·ªÉn s√°ng/t·ªëi */}
          <div style={{ textAlign: "right" }}>
            <IconButton onClick={() => setDarkMode((p) => !p)}>
              {darkMode ? <LightMode /> : <DarkMode />}
            </IconButton>
          </div>

          <Typography variant="h5" align="center" gutterBottom>
            üó£Ô∏è Luy·ªán ph√°t √¢m ti·∫øng H√†n
          </Typography>

          <Typography
            variant="h3"
            align="center"
            sx={{ my: 3, fontWeight: "bold" }}
          >
            {loading ? "ƒêang t·∫£i..." : word}
          </Typography>

          <div style={{ textAlign: "center", marginBottom: 20 }}>
            <Button
              variant="outlined"
              startIcon={<Shuffle />}
              onClick={fetchRandomWord}
              sx={{ mr: 2 }}
            >
              L·∫•y t·ª´ ng·∫´u nhi√™n
            </Button>

            <Button
              variant="contained"
              color="primary"
              startIcon={<Mic />}
              onClick={handleRecord}
              disabled={loading}
            >
              N√≥i th·ª≠
            </Button>
          </div>

          {userSpeech && (
            <>
              <Typography align="center">
                <strong>B·∫°n n√≥i:</strong> {userSpeech}
              </Typography>
              <Typography align="center" sx={{ mt: 1 }}>
                <strong>ƒêi·ªÉm ch√≠nh x√°c:</strong>{" "}
                {score !== null &&
                  (score >= 80 ? (
                    <span style={{ color: "lightgreen" }}>{score}% ‚úÖ</span>
                  ) : (
                    <span style={{ color: "salmon" }}>{score}% ‚ùå</span>
                  ))}
              </Typography>
            </>
          )}
        </Paper>
      </Container>
    </ThemeProvider>
  );
}
